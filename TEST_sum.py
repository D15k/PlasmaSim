import numpy as np
import jax
jax.config.update("jax_enable_x64", True)
import jax.numpy as jnp

Nx = 2**8                     
Nv = 2**9
Ns = 2      

k      = 0.5
alpha  = 0.5
Ue     = -2  

Lx     = 2 * np.pi / k                   
Lv     = 8      
                         
x = np.arange(Nx) * Lx / Nx
v = np.linspace(-Lv, Lv, Nv)
X, V = np.meshgrid(x, v)

pert   = lambda x: alpha * np.cos(k * x)  
fini = lambda x, v: (1 + pert(x)) / (np.sqrt(2 * np.pi)) * np.exp(-(v - Ue) ** 2 / 2)  
  
  
## Numpy
fs = np.zeros((Nx, Nv))
fs[:, :] = fini(X, V).T
rho_numpy = np.sum(fs[:, :], axis=1)
#print('Numpy', rho_numpy)

## JAX
fs = jnp.zeros((Nx, Nv))
fs = fs.at[:, :].set(fini(X, V).T)
rho_jax = jnp.sum(fs[:, :], axis=1)
#print('JAX', rho_jax)

#print(rho_numpy - rho_jax)

rho_matlab = np.array([47.9062499571506,47.9014404682099,47.8870148984442,47.8629819372771,47.8293560612660,47.7861575253812,47.7334123508053,47.6711523092593,47.5994149038641,47.5182433465504,47.4276865320290,47.3277990083389,47.2186409439893,47.1002780917166,46.9727817488769,46.8362287144999,46.6907012430275,46.5362869947667,46.3730789830869,46.2011755183916,46.0206801488999,45.8317015982734,45.6343537001245,45.4287553294478,45.2150303310140,44.9933074447704,44.7637202282930,44.5264069763360,44.2815106375289,44.0291787282689,43.7695632438626,43.5028205669705,43.2291113734067,42.9486005353550,42.6614570220551,42.3678537980225,42.0679677188608,41.7619794247307,41.4500732315388,41.1324370199131,40.8092621220302,40.4807432063644,40.1470781604263,39.8084679715630,39.4651166058909,39.1172308854339,38.7650203635417,38.4086971986628,38.0484760265478,37.6845738309614,37.3172098129789,36.9466052589482,36.5729834071948,36.1965693135515,35.8175897157935,35.4362728970593,35.0528485483423,34.6675476301329,34.2806022332970,33.8922454392728,33.5027111796714,33.1122340953652,32.7210493951489,32.3293927140585,31.9374999714337,31.5456072288090,31.1539505477186,30.7627658475023,30.3722887631961,29.9827545035947,29.5943977095704,29.2074523127345,28.8221513945252,28.4387270458082,28.0574102270740,27.6784306293159,27.3020165356727,26.9283946839193,26.5577901298886,26.1904261119061,25.8265239163196,25.4663027442047,25.1099795793258,24.7577690574336,24.4098833369766,24.0665319713045,23.7279217824412,23.3942567365031,23.0657378208372,22.7425629229544,22.4249267113286,22.1130205181368,21.8070322240067,21.5071461448450,21.2135429208124,20.9263994075125,20.6458885694608,20.3721793758970,20.1054366990048,19.8458212145986,19.5934893053385,19.3485929665314,19.1112797145745,18.8816924980971,18.6599696118534,18.4462446134196,18.2406462427430,18.0432983445941,17.8543197939675,17.6738244244759,17.5019209597806,17.3387129481008,17.1842986998400,17.0387712283676,16.9022181939906,16.7747218511509,16.6563589988781,16.5472009345285,16.4473134108384,16.3567565963171,16.2755850390033,16.2038476336082,16.1415875920622,16.0888424174863,16.0456438816014,16.0120180055903,15.9879850444233,15.9735594746576,15.9687499857169,15.9735594746576,15.9879850444233,16.0120180055903,16.0456438816014,16.0888424174863,16.1415875920622,16.2038476336082,16.2755850390033,16.3567565963171,16.4473134108384,16.5472009345285,16.6563589988781,16.7747218511509,16.9022181939906,17.0387712283676,17.1842986998400,17.3387129481008,17.5019209597806,17.6738244244759,17.8543197939675,18.0432983445941,18.2406462427429,18.4462446134196,18.6599696118534,18.8816924980971,19.1112797145745,19.3485929665314,19.5934893053385,19.8458212145986,20.1054366990048,20.3721793758970,20.6458885694607,20.9263994075125,21.2135429208124,21.5071461448450,21.8070322240066,22.1130205181368,22.4249267113286,22.7425629229544,23.0657378208372,23.3942567365031,23.7279217824412,24.0665319713045,24.4098833369766,24.7577690574336,25.1099795793257,25.4663027442047,25.8265239163196,26.1904261119061,26.5577901298886,26.9283946839193,27.3020165356727,27.6784306293159,28.0574102270740,28.4387270458082,28.8221513945252,29.2074523127345,29.5943977095704,29.9827545035947,30.3722887631961,30.7627658475023,31.1539505477186,31.5456072288090,31.9374999714337,32.3293927140585,32.7210493951488,33.1122340953652,33.5027111796714,33.8922454392728,34.2806022332970,34.6675476301329,35.0528485483423,35.4362728970593,35.8175897157935,36.1965693135515,36.5729834071948,36.9466052589482,37.3172098129789,37.6845738309614,38.0484760265478,38.4086971986628,38.7650203635417,39.1172308854339,39.4651166058909,39.8084679715630,40.1470781604263,40.4807432063644,40.8092621220302,41.1324370199131,41.4500732315388,41.7619794247307,42.0679677188608,42.3678537980225,42.6614570220551,42.9486005353550,43.2291113734067,43.5028205669704,43.7695632438626,44.0291787282688,44.2815106375289,44.5264069763360,44.7637202282930,44.9933074447704,45.2150303310140,45.4287553294478,45.6343537001245,45.8317015982734,46.0206801488999,46.2011755183916,46.3730789830869,46.5362869947667,46.6907012430274,46.8362287144999,46.9727817488769,47.1002780917166,47.2186409439893,47.3277990083389,47.4276865320290,47.5182433465504,47.5994149038641,47.6711523092593,47.7334123508053,47.7861575253812,47.8293560612660,47.8629819372771,47.8870148984442,47.9014404682099])

rel_err_numpy_matlab = np.abs(rho_numpy - rho_matlab) / np.abs(rho_matlab)
print('Mean relative error numpy-matlab:', rel_err_numpy_matlab.mean())

rel_err_jax_matlab = np.abs(rho_jax - rho_matlab) / np.abs(rho_matlab)
print('Mean relative error jax-matlab:  ', rel_err_jax_matlab.mean())

rel_err_jax_numpy = np.abs(rho_jax - rho_numpy) / np.abs(rho_numpy)
print('Mean relative error jax-numpy:   ', rel_err_jax_numpy.mean())